"""
Django settings for trademaster project.

Generated by 'django-admin startproject' using Django 1.9.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""
from __future__ import absolute_import
import os
import json
from celery.schedules import crontab
from datetime import timedelta

# djcelery.setup_loader()
# from celery import app
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '9f4wj44%-obg_u7vr6l-oabc123fdfdf7868dsfh89sdf'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']

CORS_ORIGIN_ALLOW_ALL = True

# CELERY SETTINGS


BROKER_URL = 'amqp://guest:guest@localhost:5672//'
# BROKER_URL = 'amqp://guest:guest@10.5.11.132:5672//'
# BROKER_URL = 'amqp://guest:guest@venkat-ritlap:5672//'
# BROKER_URL = 'amqp://nagnanamus:bablu0com@localhost:5672/trademaster'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERYBEAT_SCHEDULER = 'djcelery.schedulers.DatabaseScheduler'
CELERY_RESULT_BACKEND='djcelery.backends.database:DatabaseBackend'
CELERY_TIMEZONE='US/Eastern'
CELERY_ENABLE_UTC=True,
CELERYD_MAX_TASKS_PER_CHILD=20

CELERYBEAT_SCHEDULE = {
    # 'add-every-30-seconds': {
    #     'task': 'research.tasks.add',
    #     'schedule': timedelta(seconds=30),
    #     'args': (16, 16)
    # },
    # 'add-every-monday-morning': {
    #     'task': 'tasks.add',
    #     'schedule': crontab(hour=11, minute=30, day_of_week=1),
    #     'args': (16, 15),
    # },
    # 'upadate-stockCompute-day':{
    # 'task':'research.tasks.SequenceJobs_1',
    # 'schedule': crontab(hour=8, minute=0,day_of_week='1,2,3,4,5'),
    # 'args': (),
    # },

    # 'upadate-SQ-day':{
    # 'task':'research.tasks.SequenceJobs_2',
    # 'schedule': crontab(hour=23, minute=0,day_of_week='1,2,3,4,5'),
    # 'args': (),
    # }


}


dbconf=json.load(open(os.path.join(BASE_DIR, 'dbconf.json') ))

EMAIL_USE_TLS = True
EMAIL_HOST= 'smtp.gmail.com'
EMAIL_PORT='tradecoach.trademaster@gmail.com'
EMAIL_HOST_USER=dbconf['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD=dbconf['EMAIL_HOST_PASSWORD']
EMAIL_PORT=587



# Application definition

INSTALLED_APPS = [

    'django.contrib.staticfiles',
    'django.contrib.auth',
    'django.contrib.admin',
    'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'research',
    'charting',
    'stockdata',
    'homepage',
    'science',
    'django_extensions',
    'multiselectfield',
    'django_tables2',
    'django-session-idle-timeout',
    'corsheaders',
    'djcelery',
]



MIDDLEWARE_CLASSES = [

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django-session-idle-timeout.middleware.SessionIdleTimeout',
]

if DEBUG==True:
    MIDDLEWARE_CLASSES=MIDDLEWARE_CLASSES+['debug_toolbar.middleware.DebugToolbarMiddleware']    
    INSTALLED_APPS=INSTALLED_APPS+['debug_toolbar','pympler']



ROOT_URLCONF = 'trademaster.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]




WSGI_APPLICATION = 'trademaster.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases


DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # },

     'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': dbconf['NAME'],
        'USER': dbconf['USER'],
        'PASSWORD': dbconf['PASSWORD'],
         'HOST':  dbconf['HOST'],
        'PORT': '',
    },
    
    # 'default': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'OPTIONS': {
    #         'read_default_file': os.path.join(BASE_DIR, 'my.cnf'),
    #     },
    # },

    'StockData':{
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'StockData.sqlite3'),
    },

    'StockDataH5':{
        'ENGINE': '',
        'NAME': os.path.join(BASE_DIR, 'StockData.h5'),
    },

}

StockDatah5path=os.path.join(BASE_DIR, 'StockData.h5')

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'djangolog'),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console','file'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
        },
    },
}


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'
if os.path.isdir('/mnt/volume-nyc1-01/static'): 
    STATIC_ROOT = os.path.join('/mnt/volume-nyc1-01', "static")
else:
    STATIC_ROOT = os.path.join(BASE_DIR, "static")
# STATIC_ROOT='/var/www/static'

MEDIA_URL='/media/'
if os.path.isdir('/mnt/volume-nyc1-01/media'): 
    MEDIA_ROOT = os.path.join('/mnt/volume-nyc1-01', "media")
else:
    MEDIA_ROOT=os.path.join(BASE_DIR,"media")
# MEDIA_ROOT='/var/www/media'

STATICFILES_DIRS = [
    '/var/www/static/',
    '/var/www/media/',
    os.path.join(BASE_DIR, "static"),
    os.path.join(BASE_DIR, "media"),
]
STATICFILES_DIRS=[ss for ss in STATICFILES_DIRS if ss!=STATIC_ROOT and ss!=MEDIA_ROOT]




SESSION_IDLE_TIMEOUT = 1800
SESSION_EXPIRE_AT_BROWSER_CLOSE = True


NOTEBOOK_ARGUMENTS = [
'--ip=0.0.0.0',
'--port=1234',
'--open_browser=False',
]

DEBUG_TOOLBAR_PATCH_SETTINGS = False
def show_toolbar(request):
    return True
DEBUG_TOOLBAR_CONFIG = {
    "SHOW_TOOLBAR_CALLBACK" : show_toolbar,
}
INTERNAL_IPS = ('127.0.0.1',)
DEBUG_TOOLBAR_PANELS = [
    # 'debug_toolbar.panels.versions.VersionsPanel',
    'debug_toolbar.panels.timer.TimerPanel',
    # 'debug_toolbar.panels.settings.SettingsPanel',
    # 'debug_toolbar.panels.headers.HeadersPanel',
    # 'debug_toolbar.panels.request.RequestPanel',
    'debug_toolbar.panels.sql.SQLPanel',
    # 'pympler.panels.MemoryPanel',
    # 'debug_toolbar.panels.staticfiles.StaticFilesPanel',
    # 'debug_toolbar.panels.templates.TemplatesPanel',
    'debug_toolbar.panels.cache.CachePanel',
    # 'debug_toolbar.panels.signals.SignalsPanel',
    'debug_toolbar.panels.logging.LoggingPanel',
    # 'debug_toolbar.panels.redirects.RedirectsPanel',
    # 'memcache_toolbar.panels.memcache.MemcachePanel',
]


# mysqldump -u root -p trademaster > trademaster_backup.sql
# mysql -u root -p trademaster < trademaster_backup.sql



# python manage.py createsuperuser




# mysql -p -u[user] [database] < db_backup.dump


# sudo service rabbitmq-server restart
# sudo rabbitmqctl status
# sudo rabbitmq-server -detached
# sudo rabbitmqctl list_users
# sudo rabbitmqctl status
# /etc/init.d/rabbitmq-server restart
# restart to generate the erlang cookie
# sudo rabbitmqctl stop
# cd /var/lib/rabbitmq
# sudo cat .erlang.cookie 
# sudo cat /var/lib/rabbitmq/.erlang.cookie

# celery -A trademaster worker -l info

# sudo vim /etc/hosts
# sudo vim /etc/hostname


# on worker
# sudo rabbitmqctl add_user nagnanamus bablu0com
# sudo rabbitmqctl add_vhost trademaster
# sudo rabbitmqctl set_user_tags nagnanamus naga
# sudo rabbitmqctl set_permissions -p trademaster nagnanamus ".*" ".*" ".*"


# cluster 
# rabbitmq-server -detached
# rabbitmqctl cluster_status
# sudo rabbitmqctl reset  ..... to reset the cluster



# rabbitmqctl stop_app
# rabbitmqctl join_cluster rabbit@venkat-ritlap

# erlang cookie has to be in /var/lib/rabbitmq/.erlang.cookie
# sudo chown rabbitmq:rabbitmq /var/lib/rabbitmq/.erlang.cookie
# sudo chmod 600 /var/lib/rabbitmq/.erlang.cookie

# sudo invoke-rc.d rabbitmq-server start



#postgres
# sudo -u postgres psql  ... login
# invoke-rc.d postgresql restart
# sudo vim pg_hba.conf
# sudo vim postgresql.conf

# /etc/init.d/postgresql start

# 10.5.11.132 venkat-ritlap    #u: venkat
# 10.5.21.70 rithmiomainframe  #u: rithmio-mainframe
# 10.5.21.84 rithmio-MS-7888   #u: rithmio


# celery flower -A proj --address=127.0.0.1 --port=5555

# celery -A proj beat
# celery -A trademaster worker -l info


# sudo su - postgres
# pg_dump trademaster > trademaster_db_backup.bak

# createdb -T template0 trademaster
# psql trademaster < trademaster_db_backup.bak
# backed up at /var/lib/postgresql/

####### making apache2 work
# sudo chown -R root:www-data CompTechAnalysis/
# sudo chmod -R u=rwx,g=rwx,o=r CompTechAnalysis/
# namei -m /home/venkat/Documents/trademaster/trademaster/trademaster/wsgi.py
# chmod +x all the directories upto the root
# namei -m /var/www/static/debug_toolbar/img
